module SyntaxTest
#=
#    This part of the tests checks that the files generated by MMTojulia.dumpProgram complies
#    to the syntactic rules of Julia. No semantic check nor runtime check.
=#
using Test
include("../metaModelicaToJulia.jl")

#= macro to test if a function throws or not =#
macro test_no_throw(expr)
  quote
    try
      $expr
      true
    catch
      false
    end
  end |> esc
end

function executeTestSteps(homeDirectory, sourceDirectory, outputDirectory, omc)
  outDir = createDirectoryReportErrorOnFailure(abspath(outputDirectory))
  translateFilesIfOutputIsEmpty(sourceDirectory, outDir, omc)
  checkSyntax(outDir, sourceDirectory)
  cd(homeDirectory)
end

function syntaxCheck(omc)
  @assert pwd() == abspath(".")[1:end - 1] "Tests should be run from the suite"
  checkHome = pwd()
  @testset "Syntax tests" begin
    executeTestSteps(checkHome, "./Primitives", "./OutputPrimitives", omc)
    executeTestSteps(checkHome, "./Algorithms", "./OutputAlgorithms", omc)
  end
end

function createDirectoryReportErrorOnFailure(dirToCreate)
  directory = dirToCreate
  if !isdir(directory)
    mkdir(directory)
  end
  @assert isdir(directory) "Failed to create directory. Aborting test"
  return directory
end

function translateFilesIfOutputIsEmpty(directoryWithModelicaFiles,directory, omc)
  cd(directoryWithModelicaFiles)
  if size(readdir(directory),1) < 3
    filesToConvert = [abspath(f) for f in filter(x -> endswith(x, "mo"), readdir())]
    @testset "Translation test $directory" begin
      @test_no_throw metaModelicaToJulia(filesToConvert, omc, directory)
    end
  end
  cd("..")
end

function checkSyntax(directory, description)
  @testset "Syntax test for $description: " begin
    cd(abspath("$directory"))
    #For some reason all.jl cannot be parsed and passed to eval.
    for f in filter(x -> endswith(x, "jl") && !endswith(x, "all.jl"), readdir())
      fullPath = abspath("$f")
      println("Parsing: $fullPath...")
      fileContents = read(f, String)
      try
        println(abspath("$f"))
        @test_nowarn eval(Meta.parse(fileContents))
      catch
        println("Failed to parse: $f")
        @test false
      end
    end
  end
end

end #= End syntaxCheck.jl =#
